
plugins {
	id 'java'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.4'
}

description = 'Wrapper for slf4j Logger that uses format strings'
group       = 'net.swisstech'
version     = '2.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// normal repositories and dependencies
repositories {
	mavenLocal()
	mavenCentral()
}

// project dependencies
ext.versions = [
	  slf4j : '1.8.0-beta2'
	, testNg: '6.8.8'
]

dependencies {
	compile     "org.slf4j:slf4j-api:${versions.slf4j}"

	testCompile "org.testng:testng:${versions.testNg}"
	testCompile "org.slf4j:slf4j-simple:${versions.slf4j}"
}

// testing
test {
	useTestNG()
}

// generate the logger class by calling the python generator script
task generateLogger(type: Exec) {

	// compileJava depends on 'this' task
	tasks.compileJava.dependsOn name

	// where to put the generated sources
	ext.destinationDir = "${buildDir}/generated-sources/generate-logger"

	// configure task to generate the logger code
	commandLine = [ 'python', 'src/main/python/generate_logger.py', ext.destinationDir ]

	// only regenerate when the source file has changed
	inputs.dir( new File("${buildDir}/../src/main/python"))
	outputs.dir(new File("${ext.destinationDir}"))
}

// make sure the generated code is available to the compiler
sourceSets.main.java.srcDirs += generateLogger.destinationDir

// task to generate wrapper
wrapper {
	gradleVersion = '4.10'
}

// source-code jar
task sourceJar(type: Jar) {
	from sourceSets.main.allSource
}

// bintray uses the publication, also includes source jar
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourceJar {
				classifier 'sources'
			}
		}
	}
}

def getProperty = { String name ->
	try {
		return project[name]
	}
	catch (MissingPropertyException e) {
		println "!!! property ${name} is not available"
		return ""
	}
}

apply plugin: 'com.jfrog.bintray'
bintray {
	// key and user must be in your ~/.gradle/gradle.properties
	user         = project.hasProperty('swisstech_bintray_user')   ? project.swisstech_bintray_user   : System.getenv('SWISSTECH_BINTRAY_USER')
	key          = project.hasProperty('swisstech_bintray_apikey') ? project.swisstech_bintray_apikey : System.getenv('SWISSTECH_BINTRAY_KEY')
	dryRun       = false
	publish      = true
	publications = [ 'mavenJava' ]
	pkg {
		repo            = 'maven'
		name            = project.name
		desc            = project.description
		licenses        = [ 'Apache-2.0' ]
		websiteUrl      = "https://github.com/stackmagic/${project.name}"
		vcsUrl          = "https://github.com/stackmagic/${project.name}.git"
		issueTrackerUrl = "https://github.com/stackmagic/${project.name}/issues"
		publicDownloadNumbers = true
		version {
			name = project.version
			desc = project.description
		}
	}
}
