#!/usr/bin/env python

import os
import sys

header = """// THIS FILE IS GENERATED, CHANGES WILL BE OVERWRITTEN
package net.swisstech.log;

/** Autogenerated Logger Wrapper that uses Java Format Strings which will only be evaluated if a given log level is enabled. */
public final class Logger {

	private final org.slf4j.Logger log;

	Logger(org.slf4j.Logger log) {
		this.log = log;
	}

	public boolean isTraceEnabled() {
		return log.isTraceEnabled();
	}

	public boolean isDebugEnabled() {
		return log.isDebugEnabled();
	}

	public boolean isInfoEnabled() {
		return log.isInfoEnabled();
	}

	public boolean isWarnEnabled() {
		return log.isWarnEnabled();
	}

	public boolean isErrorEnabled() {
		return log.isErrorEnabled();
	}

"""

footer = """}
"""

# default for maven - gradle overrides this with a commandline argument
basedir = 'target/generated-sources/generate-logger'
if len(sys.argv) > 1:
	basedir = sys.argv[1]

dir        = '%s/net/swisstech/log' % basedir
fileName   = '%s/Logger.java' % dir

#print '>>> generating logger class into %s' % fileName

levels     = [ "trace", "debug", "info", "warn", "error" ]
primitives = [ "byte", "short", "int", "long", "float", "double", "char", "boolean", "Object" ]

numOfArgs = 20

try:
	os.makedirs(dir)
except:
	pass

try:
	os.remove(fileName)
except:
	pass

# generate the java file
with open(fileName, 'w+') as file:

	# write the beginning of the file
	file.write(header)

	# for all log levels we want to support
	for level in levels:

		# generate log method for just logging a throwable
		file.write("	public void %s(Throwable t) {\n" % level)
		file.write("		%s(\"Exception %s\", t.getMessage(), t);\n" % (level, level))
		file.write("	}\n")
		file.write("\n")

		# generate log methods for primitive data types
		for prim in primitives:
			file.write("	public void %s(%s msg) {\n" % (level, prim))
			file.write("		log.%s(String.valueOf(msg));\n" % level)
			file.write("	}\n")
			file.write("\n")

		# generate log methods with formatstring + args (no varargs)
		# there will still be autoboxing if called with primitive types
		for i in range(0, numOfArgs):

			# generate a list of arguments for the method signatures and calls
			arglist = ""
			calllist = ""
			for x in range(0, i):
				arglist = arglist + ", Object p%02d" % x
				calllist = calllist + ", p%02d" % x

			file.write("	public void %s(String fmt%s) { \n" % (level, arglist))
			file.write("		%s(fmt%s, null);\n" % (level, calllist))
			file.write("	}\n")
			file.write("\n")
			file.write("	public void %s(String fmt%s, Throwable t) { \n" % (level, arglist))
			file.write("		if (is%sEnabled()) {\n" % level.title())
			file.write("			String msg = String.format(fmt%s);\n" % calllist)
			file.write("			if (t == null) {\n")
			file.write("				log.%s(msg);\n" % level)
			file.write("			} else {\n")
			file.write("				log.%s(msg, t);\n" % level)
			file.write("			}\n")
			file.write("		}\n")
			file.write("	}\n")
			file.write("\n")

	# write the end of the file
	file.write(footer)
